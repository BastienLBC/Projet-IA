import pytest
from Game.game_Model.game_model import *

def test_check_enclosure_empty_board():
    game = GameModel("P1", "P2", size=3)
    game.matrix = [[0,0,0],
                  [0,0,0],
                  [0,0,2]]
    game.player_turn = 1
    game.check_enclosure()
    assert game.matrix == [[0,0,0],
                         [0,0,0],
                         [0,0,2]]

def test_check_enclosure_simple_case():
    game = GameModel("P1", "P2", size=3)
    game.matrix = [[1,1,0],
                  [1,1,1],
                  [1,2,2]]
    game.player_turn = 1
    game.check_enclosure()
    assert game.matrix == [[1,1,1],
                         [1,1,1],
                         [1,2,2]]

def test_check_enclosure_no_enclosed_area():
    game = GameModel("P1", "P2", size=3)
    game.matrix = [[1,1,1],
                  [1,0,0],
                  [1,1,2]]
    game.player_turn = 1
    game.check_enclosure()
    assert game.matrix == [[1,1,1],
                         [1,0,0],
                         [1,1,2]]

def test_check_enclosure_multiple_spaces():
    game = GameModel("P1", "P2", size=4)
    game.matrix = [[1,1,1,1],
                  [1,0,0,1],
                  [1,0,1,1],
                  [1,1,2,2]]
    game.player_turn = 1
    game.check_enclosure()
    assert game.matrix == [[1,1,1,1],
                         [1,1,1,1],
                         [1,1,1,1],
                         [1,1,2,2]]

def test_check_enclosure_multiple_enclosure():
    game = GameModel("P1", "P2", size=4)
    game.matrix = [[1,1,0,0],
                  [1,1,0,1],
                  [0,1,1,2],
                  [1,1,2,2]]
    game.player_turn = 1
    game.check_enclosure()
    assert game.matrix == [[1,1,1,1],
                         [1,1,1,1],
                         [1,1,1,2],
                         [1,1,2,2]]

                         
tests = [
    ([[1,1,1],[1,2,1],[1,2,2]],
     1,
     [[1,1,1],[1,2,1],[1,2,2]]),

    ([[1,0,0],[1,1,1],[1,2,2]],
     1,
     [[1,1,1],[1,1,1],[1,2,2]]),

    ([[1,1,1],[1,0,2],[1,1,2]],
     1,
     [[1,1,1],[1,0,2],[1,1,2]]),

    ([[1,2,0],[1,2,0],[1,2,2]],
     2,
     [[1,2,2],[1,2,2],[1,2,2]]),

    ([[1,0,1,1],[1,0,0,1],[1,1,1,2],[1,1,1,2]],
     1,
     [[1,1,1,1],[1,1,1,1],[1,1,1,2],[1,1,1,2]]),

    ([[1,0,1,1],[1,0,0,1],[1,1,0,1],[1,1,2,2]],
     2,
     [[1,0,1,1],[1,0,0,1],[1,1,0,1],[1,1,2,2]]),

    ([[1,1,0,0],[1,1,0,1],[0,1,2,2],[1,1,2,2]],
     1,
     [[1,1,0,0],[1,1,0,1],[1,1,2,2],[1,1,2,2]]),
]   

@pytest.mark.parametrize("board,turn,expected", tests)
def test_enclosure(board, turn, expected):
		game = GameModel("P1", "P2", size=len(board))
		game.board = board
		game.player_turn = turn
		game.check_enclosure()
		assert game.board == expected, f"{board} =({turn})=> {game.board}. But expected : {expected} "