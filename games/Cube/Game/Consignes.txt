Cubee - énoncé détaillé
1.Règles du jeu
But :
Posséder plus de cases que l’adversaire
Déroulement :
Deux joueurs s'affrontent sur un plateau carré d'une taille variable (5x5 cases par défaut).
Un joueur gagne des cases en se déplaçant dessus.
Au début de la partie, les joueurs commencent chacun dans un coin opposé du terrain. Chacun à leur tour, ils vont se déplacer d'une case (vers le haut, le bas, la gauche ou la droite). Un joueur ne peut pas se déplacer sur une case appartenant au joueur adverse ni sortir des limites du plateau.

Si un joueur arrive à faire un enclos (bloquer l’accès à certaines cases pour l’adversaire), les cases de l'enclos appartiennent automatiquement au joueur qui les a bloquées.

Le jeu s’arrête lorsqu’il ne reste plus de case libre.

2. Etapes
2.1 Jeu de base
Comme toujours, avant de vous plonger dans la programmation, il faut réfléchir et analyser…
Faites quelques mockups (des croquis de votre jeu) afin de bien visualiser les éléments et la manière de jouer.
Faites le diagramme UML de votre jeu :
Quelles sont les classes nécessaires ?
Quels sont leurs attributs ?
De quelles méthodes vais-je avoir besoin ?
Ecrivez toutes les spécifications et se répartissez vous le travail.
Il ne vous reste plus qu’à développer le jeu de base (sans les enclos).
Le jeu sera difficile à tester avant que toutes les parties soient implémentées. Dès lors, faire des tests unitaires pourrait vous aider :
2.2. Enclos
Pour implémenter les enclos, je vous conseille vivement d’utiliser l’algorithme BFS.
L'algorithme BFS (Breadth-First Search, ou parcours en largeur) est un algorithme utilisé pour explorer ou parcourir des graphes ou des arbres. Il explore les nœuds d'un graphe en commençant par un nœud source et explore les voisins de chaque nœud avant de passer aux nœuds des niveaux suivants. C'est un algorithme non-récursif, souvent implémenté à l'aide d'une file (queue).
Fonctionnement de BFS
Point de départ : L'algorithme commence par un nœud de départ appelé "source".
File d'attente (Queue) : Il utilise une file (FIFO) pour garder la trace des nœuds à visiter. On y place d'abord le nœud source.
Visite des voisins : Pour chaque nœud, on explore ses voisins directs (les nœuds adjacents), les marque comme visités et les ajoute à la file d'attente.
Répéter jusqu'à épuisement : L'algorithme continue en traitant chaque nœud de la file d'attente, jusqu'à ce que la file soit vide, ce qui signifie que tous les nœuds accessibles depuis le point de départ ont été visités.
Dans notre cas, il ne s'agit pas d'un arbre mais d'un plateau. Ceci dit, un plateau peut être vu comme un arbre (connexe). Nous allons donc parcourir en BFS le plateau à partir de la case courante et noter tous les nœuds visités (ou plutôt visitable).
Nous prendrons note des nœuds visitables (reachables). Ca permettra de repérer des enclos (zone non atteignable)
┌────────────────────┐
│ Recherche d'enclos │
└────────────────────┘
┌─── *
│ reachable = board parallèle remplis de False // par défaut, rien n'est atteignable
│ queue = FIFO init à case actuelle // noeuds à visiter = cases atteignables pas encore traitées
│
│╔══ while queue pas vide :
│║ todo = queue.pop()
│║
│║╔══ Pour chaque case voisine de todo :
│║║┌── if case dans board & pas déjà reachable & libre (ou a lui) :
│║║│ reachable[case] = True
│║║│ queue.push(case)
│║║└──
│║╙──
│╙──
└──────────
​
Tests unitaires
Prévoyez une série de tests unitaires pour tester votre algorithme. Voici un exemple qui pourrait vous aider :
test_enclosure.py
2.3. IA
Pour cette étape, implémentez l’apprentissage de l’IA : à chaque mouvement qu’elle fait, l’IA apprend. A ce stade, nous ne parlons pas encore d’entrainement intensif (il s’agit de la prochaine étape).
Il vous est demandé d’implémenter votre IA via la Q-function, à votre avis, quelle est la raison de ce choix ?
Réfléchissez aux informations nécessaires pour implémenter votre IA :
A quoi va ressembler votre Q-table ? Qu’est ce qu’un état ? Quelles sont les actions ?
Quels sont les différents paramètres et à la récompense ?
Quelles sont les étapes à suivre lorsque votre IA joue pour qu’elle apprenne en même temps?
Il est conseillé de pouvoir sauver en mémoire l’état des connaissances de votre IA quand vous souhaitez fermer le jeu. Quelle solution vous semble la meilleure ?
2.4. Entrainement
Il est maintenant temps de mettre en place un entrainement intensif. Et, à moins que vous ayez du temps à perdre, je vous conseille de permettre à l’IA de s’entrainer contre une autre IA et de ne pas afficher ces parties intensives.
Prévoyez les changements nécessaires dans votre projet.
Lancez vos premières séries d’entrainement sur de petits plateaux. Comparez ensuite les résultats en fonction des paramètres. Une fois que vous pensez avoir trouvez les paramètres optimaux, pourquoi ne pas essayer sur un grand plateau ?